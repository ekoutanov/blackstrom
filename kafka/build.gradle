def packageName = 'blackstrom-kafka'
version = project(':').version

dependencies {
  compile project(':')
  compile 'org.apache.kafka:kafka-clients:0.11.0.2'
  
  testCompile project(':blackstrom-codec-jackson')
  testCompile project(':blackstrom-codec-jackson').sourceSets.test.output
  testCompile project(':blackstrom-codec-kryo')
  testCompile project(':blackstrom-codec-kryo').sourceSets.test.output
  testCompile project(':blackstrom-sim')
  testCompile project(':blackstrom-sim').sourceSets.test.output
  testCompile 'com.obsidiandynamics.fulcrum:fulcrum-docker-compose:0.4.0'
}

task startKafka(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  main = 'com.obsidiandynamics.blackstrom.kafka.RunKafkaDocker$Start'
}

task stopKafka(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  main = 'com.obsidiandynamics.blackstrom.kafka.RunKafkaDocker$Stop'
}

jar {
  baseName packageName
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = 'javadoc'
  from "$buildDir/docs/javadoc"
}
 
task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = 'sources'
}
 
artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project(':').group
      artifactId packageName
      version project(':').version
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "${project(':').projectDir}/../repo"
    }
  }
}

def envUser = 'BINTRAY_USER'
def envKey = 'BINTRAY_KEY'
def packageDesc = 'Kafka-based ledger implementation'
def repoName = 'blackstrom'
bintray {
  user = System.getenv(envUser)
  key = System.getenv(envKey)
  publications = ['mavenJava']
  pkg {
    repo = "${repoName}"
    name = packageName
    userOrg = 'obsidiandynamics'
    desc = packageDesc
    websiteUrl = "https://github.com/obsidiandynamics/${repoName}"
    licenses = ['BSD New']
    vcsUrl = "https://github.com/obsidiandynamics/${repoName}"
    issueTrackerUrl = "https://github.com/obsidiandynamics/${repoName}/issues"
    publicDownloadNumbers = true
    githubRepo = "obsidiandynamics/${repoName}"
    override = true
    publish = false
    version {
      name = project(':').version
      desc = packageDesc
      released  = new Date()
      vcsTag = project(':').version
    }
  }
}
